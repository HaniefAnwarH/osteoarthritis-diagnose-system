# -*- coding: utf-8 -*-
"""knee osteoarthritis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QcEbVKsoMiA57fqHFdeblT-Ijfvi1Tfe

#**Sistem Rekomendasi Pengobatan Osteoarthritis Lutut Menggunakan Model VGG16 dan Decision Tree**

##Hanief Anwar Hayat  
##22/494260/TK/54196  
##Teknik Biomedis  
##Biosibernetika

Sel 1: Instalasi Dependensi
"""

!pip install tensorflow numpy opencv-python-headless

import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import os
from google.colab import files
import zipfile
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
print("Dependensi terinstal dan diimpor.")

"""Sel 2: Unggah dan Ekstrak Dataset"""

# Unggah file zip dataset dari laptop dan ekstrak ke direktori sementara
print("Unggah file zip dataset Knee Osteoarthritis dari laptop")
uploaded = files.upload()

# Ekstrak file zip
for file_name in uploaded.keys():
    if file_name.endswith('.zip'):
        with zipfile.ZipFile(file_name, 'r') as zip_ref:
            zip_ref.extractall('/content/dataset')
        print(f"Dataset diekstrak ke /content/dataset dari {file_name}")
dataset_path = '/content/dataset'

"""Sel 3: Pra-pemrosesan Dataset"""

# Muat dan proses dataset untuk pelatihan dan validasi
def load_and_preprocess_data(dataset_path):
    datagen = ImageDataGenerator(
        rescale=1./255,
        validation_split=0.2,
        rotation_range=20,
        zoom_range=0.2,
        horizontal_flip=True
    )

    train_generator = datagen.flow_from_directory(
        os.path.join(dataset_path, 'training'), # Specify training folder
        target_size=(224, 224),
        batch_size=32,
        class_mode='categorical',
        subset='training'
    )

    validation_generator = datagen.flow_from_directory(
        os.path.join(dataset_path, 'validation'), # Specify validation folder
        target_size=(224, 224),
        batch_size=32,
        class_mode='categorical',
        subset='validation'
    )

    return train_generator, validation_generator

train_generator, validation_generator = load_and_preprocess_data(dataset_path)
print("Dataset telah dimuat dan diproses.")

"""Sel 4: Bangun Model VGG16"""

# Bangun model VGG16 dengan lapisan khusus untuk klasifikasi 5 kelas
def build_vgg16_model():
    base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
    for layer in base_model.layers:
        layer.trainable = False

    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(1024, activation='relu')(x)
    predictions = Dense(5, activation='softmax')(x) # Changed from 3 back to 5 output classes

    model = Model(inputs=base_model.input, outputs=predictions)
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    return model

model = build_vgg16_model()
model.summary()

"""Sel 5: Latih Model VGG16"""

# Latih model dengan data pelatihan dan validasi
history = model.fit(
    train_generator,
    epochs=25,
    validation_data=validation_generator
)

# Plot akurasi dan loss
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Akurasi Pelatihan')
plt.plot(history.history['val_accuracy'], label='Akurasi Validasi')
plt.title('Akurasi Model')
plt.xlabel('Epoch')
plt.ylabel('Akurasi')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Loss Pelatihan')
plt.plot(history.history['val_loss'], label='Loss Validasi')
plt.title('Loss Model')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

"""Sel 6: Evaluasi Model"""

# Evaluasi model pada set validasi dan buat matriks konfusi
loss, accuracy = model.evaluate(validation_generator)
print(f"Validation Loss: {loss:.4f}, Validation Accuracy: {accuracy:.4f}")

# Prediksi untuk matriks konfusi
y_pred = []
y_true = []
for images, labels in validation_generator:
    preds = model.predict(images)
    y_pred.extend(np.argmax(preds, axis=1))
    y_true.extend(np.argmax(labels, axis=1))
    if len(y_true) >= validation_generator.samples:
        break

cm = confusion_matrix(y_true, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1, 2, 3, 4])
disp.plot(cmap=plt.cm.Blues)
plt.title('Matriks Konfusi')
plt.show()

"""Sel 7: Implementasi Decision Tree"""

# Fungsi untuk rekomendasi pengobatan berdasarkan KL grade, usia, dan BMI
def recommend_treatment(kl_grade, age, bmi):
    if kl_grade == 0:
        return "Tidak perlu pengobatan"
    elif kl_grade == 1:
        treatment = "Manajemen konservatif: olahraga, edukasi"
        if bmi > 25:
            treatment += ", penurunan berat badan"
        return treatment
    elif kl_grade == 2:
        treatment = "Manajemen konservatif: olahraga, edukasi, NSAID"
        if bmi > 25:
            treatment += ", penurunan berat badan"
        return treatment
    elif kl_grade == 3:
        treatment = "Manajemen konservatif: olahraga, edukasi, NSAID, pertimbangkan injeksi intra-artikular, terapi fisik"
        if bmi > 25:
            treatment += ", penurunan berat badan"
        return treatment
    elif kl_grade == 4:
        if age > 50 and bmi < 40:
            return "Pertimbangkan penggantian lutut total, ditambah manajemen konservatif"
        elif age > 50 and bmi >= 40:
            return "Penurunan berat badan disarankan sebelum mempertimbangkan TKR, ditambah manajemen konservatif"
        else:
            return "Diskusikan dengan spesialis, pertimbangkan manajemen konservatif"
    else:
        return "KL grade tidak valid"

print("Fungsi pohon keputusan telah didefinisikan.")

"""Sel 8: Prediksi dan Rekomendasi untuk Gambar Baru"""

# Unggah gambar baru dan berikan input usia serta BMI
import cv2
print("Unggah gambar X-ray baru untuk prediksi")
uploaded_image = files.upload()

# Proses gambar baru
for image_name in uploaded_image.keys():
    img = cv2.imread(image_name)
    img = cv2.resize(img, (224, 224))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)

    # Prediksi KL grade
    predicted_kl_grade = np.argmax(model.predict(img))

    # Input usia dan BMI
    age = int(input("Masukkan usia pasien: "))
    bmi = float(input("Masukkan BMI pasien: "))

    # Dapatkan rekomendasi
    recommendation = recommend_treatment(predicted_kl_grade, age, bmi)
    print(f"Prediksi KL Grade: {predicted_kl_grade}")
    print(f"Rekomendasi Pengobatan: {recommendation}")